// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String
  phoneNumber   String?
  password      String
  isVerified    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  usersInGroups UsersInGroups[]
  Groups        Group[]
  expensesAdded Expenses[]
  expenseSplits ExpenseSplit[]
  settlements1  Settlement[]    @relation("PayerRelation")
  settlements2  Settlement[]    @relation("PayeeRelation")
}

model UserEmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(400)
  userId    String
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id            String          @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User?           @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  createdBy     String?
  usersInGroups UsersInGroups[]
  groupExpenses Expenses[]
}

model UsersInGroups {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, groupId]) // Ensure each user-group pair is unique
}

model Expenses {
  id            String         @id @default(uuid())
  description   String
  totalValue    Float
  addedBy       User?          @relation(fields: [addedById], references: [id], onDelete: SetNull)
  addedById     String?
  group         Group?         @relation(fields: [groupId], references: [id], onDelete: SetNull)
  groupId       String?
  expenseSplits ExpenseSplit[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ExpenseSplit {
  id         Int       @id @default(autoincrement())
  expense    Expenses? @relation(fields: [expenseId], references: [id], onDelete: SetNull)
  expenseId  String?
  user       User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  owedAmount Float
  paidAmount Float     @default(0.0) // Track if this user has paid any part
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([expenseId, userId]) // Ensure each user-expense pair is unique
}

model Settlement {
  id        Int      @id @default(autoincrement())
  payer     User?    @relation("PayerRelation", fields: [payerId], references: [id], onDelete: SetNull)
  payerId   String?
  payee     User?    @relation("PayeeRelation", fields: [payeeId], references: [id], onDelete: SetNull)
  payeeId   String?
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([payerId, payeeId, createdAt]) // Ensure no duplicate settlement for the same payer-payee at the same time
}
